{"version":3,"sources":["components/QuoteComponent.js","App.js","serviceWorker.js","index.js"],"names":["QuoteComponent","props","className","id","quote","author","onClick","generateQuote","href","App","state","makeHttpRequest","bind","generateNewQuote","endpoint","axios","get","Error","data","quotes","e","preventDefault","this","setState","a","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAgCeA,G,YA5BQ,SAACC,GACtB,OACE,6BACE,yBAAKC,UAAU,aACb,uBAAGC,GAAG,gBACJ,uBAAGD,UAAU,sBACZD,EAAMG,MAAMA,MACb,6BACA,6BACA,0BAAMD,GAAG,UAAT,KACKF,EAAMG,MAAMC,OAASJ,EAAMG,MAAMC,OAAS,aAInD,yBAAKH,UAAU,gBACb,4BACEC,GAAG,YACHG,QAASL,EAAMM,eAFjB,aAKA,yBAAKJ,GAAG,SACN,uBAAGK,KAAI,gDAA2CP,EAAMG,MAAMA,MAAvD,YAAgEH,EAAMG,MAAMC,SAAU,uBAAGH,UAAU,yBC2BrGO,G,kBA9Cb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CACXN,MAAO,IAGT,EAAKO,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPP,E,sHAUGE,G,gGAGJC,IAAMC,IAAIF,G,OAAxBV,E,4DAEM,IAAIa,MAAM,+C,gCAEXb,EAAMc,KAAKC,OAAO,I,gMAGJC,G,8EACrBA,EAAEC,iBACe,sE,SACGC,KAAKX,gBADR,uE,OACXP,E,OACNkB,KAAKC,UAAS,SAACb,EAAOT,GAAR,MAAmB,CAAEG,Y,iJAGjB,IACdA,EADa,OAEjB,sBAAC,sBAAAoB,EAAA,sEACe,EAAKb,gBAAgB,uEADpC,OACCP,EADD,OAEC,EAAKmB,SAAS,CACZnB,UAHH,0CAAD,K,+BASA,OACE,yBAAKF,UAAU,OACX,kBAAC,EAAD,CAAgBE,MAAOkB,KAAKZ,MAAMN,MAAOG,cAAee,KAAKT,wB,GAzCrDY,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c3370ff3.chunk.js","sourcesContent":["import React from 'react';\nimport './QuoteComponent.css';\nimport '../../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nconst QuoteComponent = (props) => {\n  return (\n    <div>\n      <div className=\"quote-div\">\n        <p id=\"quote-string\">\n          <i className=\"fas fa-quote-left\"></i>  \n          {props.quote.quote}\n          <br />\n          <br />\n          <span id=\"author\">\n            - {props.quote.author ? props.quote.author : 'Unknown'}\n          </span>\n        </p>\n      </div>\n      <div className=\"controls-div\">\n        <button \n          id=\"new-quote\"\n          onClick={props.generateQuote}>\n          New Quote\n        </button>\n        <div id=\"share\">\n          <a href={`https://twitter.com/intent/tweet?text=${props.quote.quote}-${props.quote.author}`}><i className=\"fab fa-twitter\"></i></a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default QuoteComponent;","import React from 'react';\nimport axios from 'axios';\nimport QuoteComponent from './components/QuoteComponent';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: {}\n    }\n    \n    this.makeHttpRequest = this.makeHttpRequest.bind(this);\n    this.generateNewQuote = this.generateNewQuote.bind(this);\n  }\n\n  async makeHttpRequest(endpoint){\n    let quote;\n    try {\n      quote = await axios.get(endpoint);\n    } catch (error) {\n      throw new Error('HTTP request failed. Please try again later');\n    }\n    return quote.data.quotes[0];\n  }\n\n  async generateNewQuote(e){\n    e.preventDefault();\n    const endpoint = 'https://opinionated-quotes-api.gigalixirapp.com/v1/quotes?rand=true';\n    const quote = await this.makeHttpRequest(endpoint);\n    this.setState((state, props) => ({ quote }))\n  }\n\n  componentDidMount(){\n    let quote\n    (async () => {\n      quote = await this.makeHttpRequest('https://opinionated-quotes-api.gigalixirapp.com/v1/quotes?rand=true');\n      this.setState({\n        quote\n      });\n    })();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <QuoteComponent quote={this.state.quote} generateQuote={this.generateNewQuote}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}